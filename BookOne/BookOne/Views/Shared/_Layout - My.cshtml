<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - BookOne</title>

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")


    <style type="text/css">

        #MyNavbar {
            background-color: #000000; 
            border-bottom: none;
            opacity: 0.7;
            filter: alpha(opacity=30)
        }

        .video-container {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            pointer-events: none;
            background-attachment: fixed;
        }

        .video-container video {
            min-width: 100%;
            min-height: 100%;
            width: auto;
            height: auto;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            opacity: 0.2;
            pointer-events: none;
            background-attachment: fixed;
            z-index: 1;
        }

        .header th {
            color: rgb(0, 255, 255);
        }

        #weAreHere a {
            color: rgb(0, 255, 255);
        }

        .table {
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
            font-size: 18px;
            color: rgba(255, 255, 255, 1);
        }
        a {
            color: rgba(255, 255, 255, 0.8);
        }

        #blink a {
            color: #9d9d9d;
        }
        
    </style>

</head>
<body onload=" rotate()"  >




    <div class="video-container">
        <video id="video" autoplay loop muted>
            <source src="~/Content/images/fish2.mp4" type="video/mp4" />
        </video>
    </div>

    <div id="MyNavbar" class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink(":)", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <li>@Html.ActionLink("All", "Index", "Books")</li>
                    }
                    <li id="weAreHere">@Html.ActionLink("My", "MyBooks", "Books")</li>
                    <li>@Html.ActionLink("Hand", "MyHand", "Books")</li>
                    <li id="blink">@Html.ActionLink("Requests", "Requests", "Player")</li>
                </ul>


                @{Html.RenderAction("CheckUnansweredRequests", "Player"); }



                <form class="navbar-form navbar-right" role="search">
                    <div class="form-group">
                        <input id="searchInput" type="text" class="form-control" onkeyup="SearchFunction()" placeholder="Search">
                    </div>
                    <button type="submit" class="btn btn-default">?</button>
                </form>

            </div>
        </div>
    </div>



    <div class="container body-content" onclick="rotate()">


        @using Microsoft.AspNet.Identity
        @if (Request.IsAuthenticated)
        {
            using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
            {
                @Html.AntiForgeryToken()

                <ul class="nav navbar-nav navbar-right">
                    <li>
                        @Html.ActionLink(User.Identity.GetUserName(), "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })
                    </li>
                    <li><a href="javascript:document.getElementById('logoutForm').submit()">Log off</a></li>
                </ul>
            }
        }
        else
        {
            <ul class="nav navbar-nav navbar-right">
                <li>@Html.ActionLink("Log in", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" })</li>
                <li>@Html.ActionLink("Register", "Register", "Account", routeValues: null, htmlAttributes: new { id = "registerLink" })</li>
            </ul>
        }



        @RenderBody()

        <hr />
        <footer>
            @*<p>&copy; @DateTime.Now.Year - BookOne</p>*@
        </footer>
    </div>


    @RenderSection("scripts", required: false)

   

    <script>
        function SearchFunction() {
            // Declare variables
            let input, filter, bookList, bookTitles, index, txtValue, bookAuthors = [];
            input = document.getElementById('searchInput');
            filter = input.value.toUpperCase();
            bookList = document.getElementById("listOfBooks");
            bookTitles = bookList.getElementsByClassName("bookTitle");

            // We cannot call directly forEach on bookTitles since it's a NodeList (a type of Array)
            // So we call the Array.prototype function and provide the nodeList as a parameter
            Array.prototype.forEach.call(bookTitles,
                book => bookAuthors.push(book.getElementsByTagName("td")[1].innerHTML));


            // Loop through all list items, and hide those who don't match the search query
            for (index = 0; index < bookTitles.length; index++) {
                let bookTitle = bookTitles[index].getElementsByTagName("td")[0];
                txtValue = bookTitle.innerHTML;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    bookTitles[index].style.display = "";
                } else {
                    bookTitles[index].style.display = "none";
                }
            }

            // Loop through all list items, and hide those who don't match the search query
            for (index = 0; index < bookAuthors.length; index++) {
                let author = bookAuthors[index];
                if (author.toUpperCase().indexOf(filter) > -1) {
                    console.log(author);
                }
            }
        }

    </script>
</body>
</html>

@model BookOne.ViewModels.UserViewModel

@{
    Layout = "~/Views/Shared/_Layout - UsersInfo.cshtml";
}

@{
    ViewBag.Title = "Show User Profile";
}



<style type="text/css">

    body {
        background-image: linear-gradient(rgb(255, 0, 0),rgba(0,0,0,0.1)), url('../../Content/images/TenTenCut.jpg');
        background-repeat: no-repeat;
        background-size: cover;
        background-attachment: fixed;
    }



    .owner:hover {
        border-bottom: 5px;
        text-decoration: underline;
        text-decoration-style: solid;
        color: rgb(0, 255, 255);
    }

    #availableBook a {
        color: var(--available-color);
    }

        #availableBook a:hover {
            color: var(--main-HeaderHover-color);
        }
</style>






<h2>@Html.DisplayFor(model => model.User.ActualUsername)</h2>

<div>
    <br />
    <dl class="dl-horizontal">
        @Html.HiddenFor(model => model.User.PostalCode)
        @Html.HiddenFor(model => model.User.UserStatus)
        @Html.HiddenFor(model => model.User.XP_Points)
        @Html.HiddenFor(model => model.User.EmailConfirmed)
        @Html.HiddenFor(model => model.User.PasswordHash)
        @Html.HiddenFor(model => model.User.SecurityStamp)
        @Html.HiddenFor(model => model.User.PhoneNumberConfirmed)
        @Html.HiddenFor(model => model.User.TwoFactorEnabled)
        @Html.HiddenFor(model => model.User.LockoutEndDateUtc)
        @Html.HiddenFor(model => model.User.LockoutEnabled)
        @Html.HiddenFor(model => model.User.AccessFailedCount)
        @Html.HiddenFor(model => model.User.UserName)
        @Html.HiddenFor(model => model.User.Id)
        @Html.HiddenFor(model => model.User.PhoneNumber)

        @*<dt>
            @Html.DisplayNameFor(model => model.User.Email)
        </dt>*@
        @*<dd>
            @Html.DisplayFor(model => model.User.Email)
        </dd>*@

        <dt>
            since
        </dt>
        <dd>
            @Model.User.RegisteredOn.ToShortDateString()
        </dd>

        @*<dt>
            Completed Circulations as a Borrower
        </dt>
        <dd>
            @ViewBag.CompletedCirculations
        </dd>

        <dt>
            On-Going Circulations as a Borrower
        </dt>
        <dd>
            @ViewBag.OnGoingCirculations
        </dd>*@
    </dl>
</div>



<br /><br /><br />

<table class="table">
    <tr>
        <th class="col-md-2">
            Claps
        </th>
        <th class="col-md-2">
            Shovels
        </th>
        <th class="col-md-2">
            Treats
        </th>
        <th class="col-md-2">
            Poisonous Cookies
        </th>
        @*<th class="col-md-2">
                Connector Bonus
            </th>*@
        <th class="col-md-4">
            @*To be modified as col-md-2 when Connector Bonus is implemented*@
            Nothing Received
        </th>
    </tr>

    <tr>
        <td>
            @Model.UserReactions.Count(u => u.Choice == BookOne.BookOne_Domain.UserReactionChoices.Clap)
        </td>
        <td>
            @Model.UserReactions.Count(u => u.Choice == BookOne.BookOne_Domain.UserReactionChoices.Shovel)
        </td>
        <td>
            @Model.UserReactions.Count(u => u.Choice == BookOne.BookOne_Domain.UserReactionChoices.Treat)
        </td>
        <td>
            @Model.UserReactions.Count(u => u.Choice == BookOne.BookOne_Domain.UserReactionChoices.PoisonousCookie)
        </td>
        @*<td>
            @Model.UserReactions.Count(modelItem => item.Choice == BookOne.BookOne_Domain.UserReactionChoices.ConnectorBonus)
        </td>*@
        <td>
            @Model.UserReactions.Count(u => u.Choice == BookOne.BookOne_Domain.UserReactionChoices.Nothing)
        </td>
    </tr>
</table>



